import React, { useEffect, useState } from 'react';
import { db } from '../firebase';
import {
  collection,
  getDocs,
  updateDoc,
  setDoc,
  deleteDoc,
  doc,
  query,
  where,
} from 'firebase/firestore';

// ฟังก์ชัน generateUserId (u001, u002, ...)
const generateUserId = (helpers) => {
  const userIds = helpers
    .map(h => h.userId)
    .filter(Boolean)
    .map(uid => parseInt(uid.replace('u', ''), 10))
    .filter(num => !isNaN(num));
  const nextId = (userIds.length > 0 ? Math.max(...userIds) + 1 : 1).toString().padStart(3, '0');
  return `u${nextId}`;
};

const HelperApproval = () => {
  // Tab
  const [activeTab, setActiveTab] = useState(1);

  // Tab 1 - ทีมช่วยเหลือ
  const [allHelpers, setAllHelpers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [visibleRows, setVisibleRows] = useState(10);

  // Modal Add
  const [showAddModal, setShowAddModal] = useState(false);
  const [newHelper, setNewHelper] = useState({ name: '', email: '', phone: '', helperType: '', userId: '', password: '' });
  const [adding, setAdding] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  // Team Options (Dropdown)
  const [teamOptions, setTeamOptions] = useState([]);
  const [loadingTeams, setLoadingTeams] = useState(true);

  // Tab 2 - ประเภททีม
  const [teamTypes, setTeamTypes] = useState([]);
  const [newTeamType, setNewTeamType] = useState('');
  const [newTeamName, setNewTeamName] = useState('');

  // Tab 3 - ประเภทเหตุการณ์
  const [incidentTypes, setIncidentTypes] = useState([]);
  const [newIncidentType, setNewIncidentType] = useState({ type: '', name: '' });

  // แสดงข้อมูลหลังสร้าง user
  const [showCreatedInfo, setShowCreatedInfo] = useState(false);
  const [createdHelperInfo, setCreatedHelperInfo] = useState({ email: '', password: '' });

  // ===== Edit Modal/Delete Dialog state สำหรับทุก Tab =====
  // Helper (Tab1)
  const [showEditHelperModal, setShowEditHelperModal] = useState(false);
  const [editHelper, setEditHelper] = useState(null);
  const [showDeleteHelperModal, setShowDeleteHelperModal] = useState(false);
  const [helperToDelete, setHelperToDelete] = useState(null);

  // Team Type (Tab2)
  const [showEditTeamModal, setShowEditTeamModal] = useState(false);
  const [editTeam, setEditTeam] = useState(null);
  const [showDeleteTeamModal, setShowDeleteTeamModal] = useState(false);
  const [teamToDelete, setTeamToDelete] = useState(null);

  // Incident Type (Tab3)
  const [showEditIncidentModal, setShowEditIncidentModal] = useState(false);
  const [editIncident, setEditIncident] = useState(null);
  const [showDeleteIncidentModal, setShowDeleteIncidentModal] = useState(false);
  const [incidentToDelete, setIncidentToDelete] = useState(null);

  useEffect(() => {
    fetchAllHelpers();
    fetchTeamOptions();
    fetchTeamTypes();
    fetchIncidentTypes();
  }, []);

  useEffect(() => {
    setVisibleRows(10);
  }, [activeTab, allHelpers.length]);

  // Tab 1
  const fetchAllHelpers = async () => {
    setLoading(true);
    const q = query(collection(db, 'users'), where('role', '==', 'helper'));
    const querySnapshot = await getDocs(q);
    setAllHelpers(querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
    setLoading(false);
  };

  // Team dropdown
  const fetchTeamOptions = async () => {
    setLoadingTeams(true);
    const q = query(collection(db, 'helper_teams'));
    const querySnapshot = await getDocs(q);
    setTeamOptions(querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    })));
    setLoadingTeams(false);
  };

  // ===== Modal Add =====
  const handleOpenAddModal = () => {
    setNewHelper({
      name: '',
      email: '',
      phone: '',
      helperType: '',
      userId: generateUserId(allHelpers),
      password: ''
    });
    setShowAddModal(true);
    setShowPassword(false);
  };
  const handleCloseAddModal = () => {
    setShowAddModal(false);
    setNewHelper({ name: '', email: '', phone: '', helperType: '', userId: '', password: '' });
    setShowPassword(false);
  };
  const handleChangeNewHelper = (e) => {
    setNewHelper({ ...newHelper, [e.target.name]: e.target.value });
  };

  const handleAddHelper = async (e) => {
    e.preventDefault();
    setAdding(true);
    try {
      if (!newHelper.userId) {
        alert("ไม่สามารถสร้าง userId ได้ กรุณารอสักครู่แล้วลองใหม่");
        setAdding(false);
        return;
      }

      // ส่งไปยัง api backend ที่จะสร้าง user (ไม่ต้องส่ง profileImage)
      const res = await fetch('http://localhost:4000/api/admin-create-user', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: newHelper.userId,
          email: newHelper.email,
          password: newHelper.password,
          name: newHelper.name,
          phone: newHelper.phone,
          helperType: newHelper.helperType,
        }),
      });

      const data = await res.json();
      if (data.success) {
        setShowAddModal(false);
        setShowCreatedInfo(true);
        setCreatedHelperInfo({ email: newHelper.email, password: newHelper.password });
        setNewHelper({ name: '', email: '', phone: '', helperType: '', userId: '', password: '' });
        fetchAllHelpers();
      } else {
        alert(data.error || 'ເກີດຂໍ້ຜິດພາດໃນການເພີ່ມຂໍ້ມູນ');
      }
    } catch (err) {
      alert('ເກີດຂໍ້ຜິດພາດໃນການເຊື່ອມ API');
    }
    setAdding(false);
  };

  // ===== Edit Helper Modal (Tab1) =====
  const handleOpenEditHelperModal = (helper) => {
    setEditHelper({ ...helper });
    setShowEditHelperModal(true);
  };
  const handleCloseEditHelperModal = () => {
    setEditHelper(null);
    setShowEditHelperModal(false);
  };
  const handleSaveEditHelperModal = async () => {
    if (!editHelper) return;

    // 1. อัปเดตข้อมูลใน Firestore ก่อน
    await updateDoc(doc(db, 'users', editHelper.id), {
      name: editHelper.name,
      email: editHelper.email,
      phone: editHelper.phone,
      helperType: editHelper.helperType,
      userId: editHelper.userId,
      password: editHelper.password
    });

    // 2. อัปเดตรหัสผ่านที่ Auth ด้วย ถ้ามีการเปลี่ยน password
    if (editHelper.uid && editHelper.password) {
      try {
        await fetch('http://localhost:4000/api/admin-update-password', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            uid: editHelper.uid,
            password: editHelper.password,
            userId: editHelper.userId
          })
        });
      } catch (e) {
        alert('เกิดข้อผิดพลาดในการอัปเดตรหัสผ่านที่ Auth');
      }
    } else {
      alert('ไม่พบ authUid ของผู้ใช้ อัปเดตรหัสผ่านที่ Auth ไม่สำเร็จ');
    }

    setShowEditHelperModal(false);
    setEditHelper(null);
    fetchAllHelpers();
  };

  // Delete Helper Dialog (Tab1)
  const handleAskDeleteHelper = (helper) => {
    setHelperToDelete(helper);
    setShowDeleteHelperModal(true);
  };
  const handleCancelDeleteHelper = () => {
    setShowDeleteHelperModal(false);
    setHelperToDelete(null);
  };
  const handleConfirmDeleteHelper = async () => {
    if (!helperToDelete) return;
    await deleteDoc(doc(db, 'users', helperToDelete.id));
    setShowDeleteHelperModal(false);
    setHelperToDelete(null);
    fetchAllHelpers();
  };

  // ===== TAB 2 - ประเภททีม =====
  const getNextTeamTypeId = async () => {
    const q = query(collection(db, 'helper_teams'));
    const querySnapshot = await getDocs(q);
    const ids = querySnapshot.docs
      .map(doc => doc.id)
      .filter(id => /^ht\d{3}$/.test(id));
    let maxNum = 0;
    ids.forEach(id => {
      const num = parseInt(id.substring(2), 10);
      if (num > maxNum) maxNum = num;
    });
    const nextNum = (maxNum + 1).toString().padStart(3, '0');
    return `ht${nextNum}`;
  };

  const fetchTeamTypes = async () => {
    const q = query(collection(db, 'helper_teams'));
    const querySnapshot = await getDocs(q);
    setTeamTypes(querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    })));
  };

  const handleAddTeamType = async (e) => {
    e.preventDefault();
    if (!newTeamType.trim() || !newTeamName.trim()) return;
    const nextId = await getNextTeamTypeId();
    await setDoc(doc(db, 'helper_teams', nextId), {
      id: nextId,
      type: newTeamType.trim(),
      name: newTeamName.trim()
    });
    setNewTeamType('');
    setNewTeamName('');
    fetchTeamTypes();
    fetchTeamOptions();
  };

  // Edit Team Modal
  const handleOpenEditTeamModal = (team) => {
    setEditTeam({ ...team });
    setShowEditTeamModal(true);
  };
  const handleCloseEditTeamModal = () => {
    setEditTeam(null);
    setShowEditTeamModal(false);
  };
  const handleSaveEditTeamModal = async () => {
    if (!editTeam) return;
    await updateDoc(doc(db, 'helper_teams', editTeam.id), {
      type: editTeam.type.trim(),
      name: editTeam.name.trim()
    });
    setShowEditTeamModal(false);
    setEditTeam(null);
    fetchTeamTypes();
    fetchTeamOptions();
  };

  // Delete Team Modal
  const handleAskDeleteTeam = (team) => {
    setTeamToDelete(team);
    setShowDeleteTeamModal(true);
  };
  const handleCancelDeleteTeam = () => {
    setShowDeleteTeamModal(false);
    setTeamToDelete(null);
  };
  const handleConfirmDeleteTeam = async () => {
    if (!teamToDelete) return;
    await deleteDoc(doc(db, 'helper_teams', teamToDelete.id));
    setShowDeleteTeamModal(false);
    setTeamToDelete(null);
    fetchTeamTypes();
    fetchTeamOptions();
  };

  // ===== TAB 3 - ประเภทเหตุการณ์ =====
  const getNextIncidentTypeId = async () => {
    const q = query(collection(db, 'incident_types'));
    const querySnapshot = await getDocs(q);
    const ids = querySnapshot.docs
      .map(doc => doc.id)
      .filter(id => /^idt\d{3}$/.test(id));
    let maxNum = 0;
    ids.forEach(id => {
      const num = parseInt(id.substring(3), 10);
      if (num > maxNum) maxNum = num;
    });
    const nextNum = (maxNum + 1).toString().padStart(3, '0');
    return `idt${nextNum}`;
  };

  const fetchIncidentTypes = async () => {
    const q = query(collection(db, 'incident_types'));
    const querySnapshot = await getDocs(q);
    setIncidentTypes(querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    })));
  };

  const handleAddIncidentType = async (e) => {
    e.preventDefault();
    if (!newIncidentType.type.trim() || !newIncidentType.name.trim()) return;
    const nextId = await getNextIncidentTypeId();
    await setDoc(doc(db, 'incident_types', nextId), {
      id: nextId,
      type: newIncidentType.type.trim(),
      name: newIncidentType.name.trim(),
    });
    setNewIncidentType({ type: '', name: '' });
    fetchIncidentTypes();
  };

  // Edit Incident Modal
  const handleOpenEditIncidentModal = (incident) => {
    setEditIncident({ ...incident });
    setShowEditIncidentModal(true);
  };
  const handleCloseEditIncidentModal = () => {
    setEditIncident(null);
    setShowEditIncidentModal(false);
  };
  const handleSaveEditIncidentModal = async () => {
    if (!editIncident) return;
    await updateDoc(doc(db, 'incident_types', editIncident.id), {
      type: editIncident.type,
      name: editIncident.name
    });
    setShowEditIncidentModal(false);
    setEditIncident(null);
    fetchIncidentTypes();
  };

  // Delete Incident Modal
  const handleAskDeleteIncident = (incident) => {
    setIncidentToDelete(incident);
    setShowDeleteIncidentModal(true);
  };
  const handleCancelDeleteIncident = () => {
    setShowDeleteIncidentModal(false);
    setIncidentToDelete(null);
  };
  const handleConfirmDeleteIncident = async () => {
    if (!incidentToDelete) return;
    await deleteDoc(doc(db, 'incident_types', incidentToDelete.id));
    setShowDeleteIncidentModal(false);
    setIncidentToDelete(null);
    fetchIncidentTypes();
  };

  // ========== UI ==========
  return (
    <>
      <div className="min-h-screen bg-gray-100 p-6">
        <div className="max-w-6xl mx-auto">

          {/* Main Tabs */}
          <div className="flex space-x-4 mb-8">
            <button
              onClick={() => setActiveTab(1)}
              className={`px-6 py-2 rounded-full font-medium transition ${activeTab === 1 ? 'bg-blue-600 text-white shadow' : 'bg-white border text-gray-700'}`}>
              ຈັດການທີມຊ່ວຍເຫຼືອ
            </button>
            <button
              onClick={() => setActiveTab(2)}
              className={`px-6 py-2 rounded-full font-medium transition ${activeTab === 2 ? 'bg-purple-600 text-white shadow' : 'bg-white border text-gray-700'}`}>
              ຈັດການປະເພດທີມຊ່ວຍເຫຼືອ
            </button>
            <button
              onClick={() => setActiveTab(3)}
              className={`px-6 py-2 rounded-full font-medium transition ${activeTab === 3 ? 'bg-yellow-500 text-white shadow' : 'bg-white border text-gray-700'}`}>
              ຈັດການປະເພດເຫດການ
            </button>
          </div>

          {/* ========== TAB 1: ทีมช่วยเหลือทั้งหมด ========== */}
          {activeTab === 1 && (
            <div className="bg-white shadow-md rounded-lg p-6 relative">
              <h2 className="text-2xl font-semibold text-gray-700 mb-4">👥 ທີມຊ່ວຍເຫຼືອທັງຫມົດ</h2>
              <div className="absolute top-6 right-8">
                <button
                  className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-4 py-2 rounded-lg shadow transition"
                  onClick={handleOpenAddModal}
                >
                  + ເພີ່ມທີມຊ່ວຍເຫຼືອ
                </button>
              </div>
              {loading ? (
                <p className="text-gray-500">ກຳລັງໂຫລດ...</p>
              ) : allHelpers.length === 0 ? (
                <p className="text-gray-500">ຍັງບໍ່ມີຜູ້ຊ່ວຍ</p>
              ) : (
                <div className="overflow-x-auto mt-8">
                  <table className="min-w-full table-auto border-collapse border border-gray-300">
                    <thead className="bg-green-100">
                      <tr>
                        <th className="px-4 py-2 border text-left">userId</th>
                        <th className="px-4 py-2 border text-left">ຊື່</th>
                        <th className="px-4 py-2 border text-left">ອີເມວ</th>
                        <th className="px-4 py-2 border text-left">ລະຫັດຜ່ານ</th>
                        <th className="px-4 py-2 border text-left">ເບີໂທ</th>
                        <th className="px-4 py-2 border text-left">ປະເພດທີມ</th>
                        <th className="px-4 py-2 border text-left">ຮູບພາບ</th>
                        <th className="px-4 py-2 border text-center">ການດຳເນີນງານ</th>
                      </tr>
                    </thead>
                    <tbody>
                      {allHelpers.slice(0, visibleRows).map((helper) => {
                        const teamObj = teamOptions.find(opt => opt.type === helper.helperType);
                        const teamLabel = teamObj ? `${teamObj.name} (${teamObj.type})` : helper.helperType || '-';
                        const imgUrl = helper.profileImageUrl || helper.profileImage || '/default-profile.png';
                        
                        return (
                          <tr key={helper.id} className="hover:bg-gray-50">
                            <td className="px-4 py-2 border">{helper.userId}</td>
                            <td className="px-4 py-2 border">{helper.name}</td>
                            <td className="px-4 py-2 border">{helper.email}</td>
                            <td className="px-4 py-2 border">{helper.password}</td>
                            <td className="px-4 py-2 border">{helper.phone}</td>
                            <td className="px-4 py-2 border">{teamLabel}</td>
                            <td className="relative w-20 h-20">
  <img
    src={imgUrl}
    alt="helper"
    className="w-20 h-20 rounded-full object-cover border"
    onError={e => {
      e.target.style.display = "none";
      e.target.nextSibling.style.display = "flex";
    }}
  />
  <div
    className="w-20 h-20 rounded-full border bg-white text-gray-400 text-base flex items-center justify-center absolute inset-0"
    style={{ display: 'none' }}
  >
    helper
  </div>
</td>


                            <td className="px-4 py-2 border text-center space-x-1">
                              <button className="bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded"
                                onClick={() => handleOpenEditHelperModal(helper)}>ແກ້ໄຂ</button>
                              <button className="bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded"
                                onClick={() => handleAskDeleteHelper(helper)}>ລົບ</button>
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                  {/* ปุ่ม Load More */}
                  {allHelpers.length > visibleRows && (
                    <div className="flex justify-center my-4">
                      <button
                        className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded"
                        onClick={() => setVisibleRows(v => v + 10)}
                      >
                        ສະແດງເພີ່ມເຕີມ
                      </button>
                    </div>
                  )}
                </div>
              )}

              {/* Add Modal, Edit Modal, Delete Dialog, Info Dialog */}
              {showAddModal && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                  <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md relative">
                    <button
                      className="absolute top-2 right-2 text-gray-500 hover:text-red-500 text-xl"
                      onClick={handleCloseAddModal}
                    >
                      ×
                    </button>
                    <h3 className="text-xl font-bold mb-4 text-center">ເພີ່ມທີມຊ່ວຍເຫຼືອ</h3>
                    <form onSubmit={handleAddHelper} className="space-y-3">
                      <div>
                        <label className="block text-gray-700 mb-1">userId (auto)</label>
                        <input className="border px-3 py-2 rounded w-full bg-gray-100"
                          name="userId" value={newHelper.userId} readOnly />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ຊື່</label>
                        <input className="border px-3 py-2 rounded w-full"
                          name="name" value={newHelper.name}
                          onChange={handleChangeNewHelper} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ອີເມວ</label>
                        <input className="border px-3 py-2 rounded w-full"
                          name="email" type="email" value={newHelper.email}
                          onChange={handleChangeNewHelper} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ລະຫັດຜ່ານ</label>
                        <div className="relative">
                          <input className="border px-3 py-2 rounded w-full pr-10"
                            name="password" type={showPassword ? "text" : "password"}
                            value={newHelper.password} onChange={handleChangeNewHelper} required />
                          <button type="button"
                            className="absolute right-2 top-2 text-gray-600"
                            tabIndex={-1}
                            onClick={() => setShowPassword(v => !v)}>
                            {showPassword ? "🙈" : "👁️"}
                          </button>
                        </div>
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ເບີໂທ</label>
                        <input className="border px-3 py-2 rounded w-full"
                          name="phone" value={newHelper.phone}
                          onChange={handleChangeNewHelper} required />
                      </div>
                      {/* ไม่มี input อัพโหลดรูป */}
                      <div>
                        <img
                          src={'/default-profile.png'}
                          alt="profile"
                          className="w-5 h-5 rounded-full border object-cover"
                        />
                        <div className="text-xs text-gray-400 pt-2">
                          * ຜູ້ໃຊ້ຈະຈັດການຮູບເອງຜ່ານໜ້າແອັບ
                        </div>
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ປະເພດທີມ</label>
                        <select className="border px-3 py-2 rounded w-full"
                          name="helperType" value={newHelper.helperType}
                          onChange={handleChangeNewHelper} required disabled={loadingTeams}>
                          <option value="">ເລືອກປະເພດທີມ</option>
                          {teamOptions.map(opt => (
                            <option key={opt.id} value={opt.type}>
                              {opt.type} ({opt.name})
                            </option>
                          ))}
                        </select>
                      </div>
                      <div className="flex justify-end pt-3">
                        <button type="button"
                          className="mr-2 bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded"
                          onClick={handleCloseAddModal} disabled={adding}>ຍົກເລີກ</button>
                        <button type="submit"
                          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
                          disabled={adding}>{adding ? 'ກຳລັງບັນທຶກ...' : 'ບັນທຶກ'}</button>
                      </div>
                    </form>
                  </div>
                </div>
              )}

              {/* Edit Helper Modal */}
              {showEditHelperModal && editHelper && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                  <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md relative">
                    <button
                      className="absolute top-2 right-2 text-gray-500 hover:text-red-500 text-xl"
                      onClick={handleCloseEditHelperModal}
                    >
                      ×
                    </button>
                    <h3 className="text-xl font-bold mb-4 text-center">ແກ້ໄຂຂໍ້ມູນທີມຊ່ວຍເຫຼືອ</h3>
                    <form onSubmit={e => { e.preventDefault(); handleSaveEditHelperModal(); }} className="space-y-3">
                      <div>
                        <label className="block text-gray-700 mb-1">userId</label>
                        <input className="border px-3 py-2 rounded w-full bg-gray-100"
                          value={editHelper.userId} readOnly />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ຊື່</label>
                        <input className="border px-3 py-2 rounded w-full"
                          value={editHelper.name}
                          onChange={e => setEditHelper({ ...editHelper, name: e.target.value })} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ອີເມວ</label>
                        <input className="border px-3 py-2 rounded w-full" type="email"
                          value={editHelper.email}
                          onChange={e => setEditHelper({ ...editHelper, email: e.target.value })} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ລະຫັດຜ່ານ</label>
                        <input className="border px-3 py-2 rounded w-full"
                          value={editHelper.password} type="text"
                          onChange={e => setEditHelper({ ...editHelper, password: e.target.value })} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ເບີໂທ</label>
                        <input className="border px-3 py-2 rounded w-full"
                          value={editHelper.phone}
                          onChange={e => setEditHelper({ ...editHelper, phone: e.target.value })} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ຮູບພາບ</label>
                        <img
                          src={editHelper?.profileImageUrl || editHelper?.profileImage || '/default-profile.png'}
                          alt="profile"
                          className="w-16 h-16 rounded-full border object-cover"
                        />
                        <div className="text-xs text-gray-400 pt-2">
                          * ຜູ້ໃຊ້ຈະຈັດການຮູບເອງຜ່ານໜ້າແອັບ
                        </div>
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ປະເພດທີມ</label>
                        <select className="border px-3 py-2 rounded w-full"
                          value={editHelper.helperType}
                          onChange={e => setEditHelper({ ...editHelper, helperType: e.target.value })} required>
                          <option value="">ເລືອກປະເພດທີມ</option>
                          {teamOptions.map(opt => (
                            <option key={opt.id} value={opt.type}>
                              {opt.name} ({opt.type})
                            </option>
                          ))}
                        </select>
                      </div>
                      <div className="flex justify-end pt-3">
                        <button type="button"
                          className="mr-2 bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded"
                          onClick={handleCloseEditHelperModal}>ຍົກເລີກ</button>
                        <button type="submit"
                          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">ບັນທຶກ</button>
                      </div>
                    </form>
                  </div>
                </div>
              )}

              {/* Delete Helper Modal */}
              {showDeleteHelperModal && helperToDelete && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                  <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm relative text-center">
                    <h3 className="text-xl font-bold mb-4 text-red-600">ຢືນຢັນການລົບ</h3>
                    <p className="mb-6">ຕ້ອງການລົບ <b>{helperToDelete.name}</b> ຫຼືບໍ?</p>
                    <div className="flex justify-center gap-3">
                      <button className="bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded"
                        onClick={handleCancelDeleteHelper}>ຍົກເລີກ</button>
                      <button className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded"
                        onClick={handleConfirmDeleteHelper}>ລົບ</button>
                    </div>
                  </div>
                </div>
              )}

              {/* Show Created Info */}
              {showCreatedInfo && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                  <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-sm relative text-center">
                    <h4 className="font-bold text-lg mb-4 text-green-600">ສ້າງບັນຊີສຳເລັດ!</h4>
                    <div className="mb-2"><b>Email:</b> {createdHelperInfo.email}</div>
                    <div className="mb-4"><b>Password:</b> {createdHelperInfo.password}</div>
                    <p className="text-sm text-gray-500 mb-4">ກະລຸນາຄັດລອກ/ແຈ້ງໃຫ້ທີມງານນຳໄປໃຊ້ login </p>
                    <button className="bg-blue-600 text-white px-4 py-2 rounded"
                      onClick={() => setShowCreatedInfo(false)}>ປິດ</button>
                  </div>
                </div>
              )}

            </div>
          )}

          {/* ========== TAB 2: ประเภททีมช่วยเหลือ ========== */}
          {activeTab === 2 && (
            <div className="bg-white shadow-md rounded-lg p-6">
              <h2 className="text-2xl font-semibold text-gray-700 mb-4">⚙️ ຈັດການປະເພດທີມຊ່ວຍເຫຼືອ</h2>
              <form className="flex gap-2 mb-4" onSubmit={handleAddTeamType}>
                <input className="px-3 py-2 border rounded-lg"
                  placeholder="ລະຫັດປະເພດ"
                  value={newTeamType}
                  onChange={e => setNewTeamType(e.target.value)}
                />
                <input className="px-3 py-2 border rounded-lg"
                  placeholder="ຊື່ປະເພດທີມຊ່ວຍເຫຼືອ"
                  value={newTeamName}
                  onChange={e => setNewTeamName(e.target.value)}
                />
                <button type="submit"
                  className="bg-green-600 text-white px-4 py-2 rounded-lg">ເພີ່ມ</button>
              </form>
              <table className="min-w-full table-auto border-collapse border border-gray-300">
                <thead className="bg-green-100">
                  <tr>
                    <th className="px-4 py-2 border text-left">ID (doc id)</th>
                    <th className="px-4 py-2 border text-left">ລະຫັດປະເພດ (type)</th>
                    <th className="px-4 py-2 border text-left">ຊື່ປະເພດທີມຊ່ວຍເຫຼືອ (name)</th>
                    <th className="px-4 py-2 border text-center">ການດຳເນີນການ</th>
                  </tr>
                </thead>
                <tbody>
                  {teamTypes.map(team => (
                    <tr key={team.id}>
                      <td className="px-4 py-2 border">{team.id}</td>
                      <td className="px-4 py-2 border">{team.type}</td>
                      <td className="px-4 py-2 border">{team.name}</td>
                      <td className="px-4 py-2 border text-center space-x-2">
                        <button className="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded"
                          onClick={() => handleOpenEditTeamModal(team)}>ແກ້ໄຂ</button>
                        <button className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded"
                          onClick={() => handleAskDeleteTeam(team)}>ລົບ</button>
                      </td>
                    </tr>
                  ))}
                  {teamTypes.length === 0 && (
                    <tr>
                      <td colSpan={4} className="text-gray-500 text-center py-4">ບໍ່ມີຂໍ້ມູນ</td>
                    </tr>
                  )}
                </tbody>
              </table>
              {/* Edit Team Modal */}
              {showEditTeamModal && editTeam && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                  <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md relative">
                    <button
                      className="absolute top-2 right-2 text-gray-500 hover:text-red-500 text-xl"
                      onClick={handleCloseEditTeamModal}
                    >×</button>
                    <h3 className="text-xl font-bold mb-4 text-center">ແກ້ໄຂປະເພດທີມ</h3>
                    <form onSubmit={e => { e.preventDefault(); handleSaveEditTeamModal(); }} className="space-y-3">
                      <div>
                        <label className="block text-gray-700 mb-1">ID</label>
                        <input className="border px-3 py-2 rounded w-full bg-gray-100" value={editTeam.id} readOnly />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ລະຫັດປະເພດ</label>
                        <input className="border px-3 py-2 rounded w-full" value={editTeam.type}
                          onChange={e => setEditTeam({ ...editTeam, type: e.target.value })} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ຊື່ປະເພດທີມຊ່ວຍເຫຼືອ</label>
                        <input className="border px-3 py-2 rounded w-full" value={editTeam.name}
                          onChange={e => setEditTeam({ ...editTeam, name: e.target.value })} required />
                      </div>
                      <div className="flex justify-end pt-3">
                        <button type="button"
                          className="mr-2 bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded"
                          onClick={handleCloseEditTeamModal}>ຍົກເລີກ</button>
                        <button type="submit"
                          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">ບັນທຶກ</button>
                      </div>
                    </form>
                  </div>
                </div>
              )}
              {/* Delete Team Modal */}
              {showDeleteTeamModal && teamToDelete && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                  <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm relative text-center">
                    <h3 className="text-xl font-bold mb-4 text-red-600">ຢືນຢັນການລົບ</h3>
                    <p className="mb-6">ຕ້ອງການລົບ <b>{teamToDelete.name}</b> ຫຼືບໍ?</p>
                    <div className="flex justify-center gap-3">
                      <button className="bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded"
                        onClick={handleCancelDeleteTeam}>ຍົກເລີກ</button>
                      <button className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded"
                        onClick={handleConfirmDeleteTeam}>ລົບ</button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* ========== TAB 3: ประเภทเหตุการณ์ (id auto: idt001, idt002, ...) ========== */}
          {activeTab === 3 && (
            <div className="bg-white shadow-md rounded-lg p-6">
              <h2 className="text-2xl font-semibold text-gray-700 mb-4">
                ⚙️ ຈັດການປະເພດເຫດການ
              </h2>
              <form className="flex gap-2 mb-4" onSubmit={handleAddIncidentType}>
                <input className="px-3 py-2 border rounded-lg"
                  placeholder="ລະຫັດປະເພດ"
                  value={newIncidentType.type}
                  onChange={e => setNewIncidentType({ ...newIncidentType, type: e.target.value })} required />
                <input className="px-3 py-2 border rounded-lg"
                  placeholder="ຊື່ປະເພດທີມຊ່ວຍເຫຼືອ"
                  value={newIncidentType.name}
                  onChange={e => setNewIncidentType({ ...newIncidentType, name: e.target.value })} required />
                <button type="submit"
                  className="bg-green-600 text-white px-6 py-2 rounded-lg">ເພີ່ມ</button>
              </form>
              <table className="min-w-full table-auto border-collapse border border-gray-300">
                <thead className="bg-green-100">
                  <tr>
                    <th className="px-4 py-2 border text-left">ID (doc id)</th>
                    <th className="px-4 py-2 border text-left">ລະຫັດປະເພດ (type)</th>
                    <th className="px-4 py-2 border text-left">ຊື່ປະເພດທີມຊ່ວຍເຫຼືອ (name)</th>
                    <th className="px-4 py-2 border text-center">ການດຳເນີນການ</th>
                  </tr>
                </thead>
                <tbody>
                  {incidentTypes.map(incident => (
                    <tr key={incident.id}>
                      <td className="px-4 py-2 border">{incident.id}</td>
                      <td className="px-4 py-2 border">{incident.type}</td>
                      <td className="px-4 py-2 border">{incident.name}</td>
                      <td className="px-4 py-2 border text-center space-x-2">
                        <button className="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded"
                          onClick={() => handleOpenEditIncidentModal(incident)}>ແກ້ໄຂ</button>
                        <button className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded"
                          onClick={() => handleAskDeleteIncident(incident)}>ລົບ</button>
                      </td>
                    </tr>
                  ))}
                  {incidentTypes.length === 0 && (
                    <tr>
                      <td colSpan={4} className="text-gray-500 text-center py-4">ບໍ່ມີຂໍ້ມູນ</td>
                    </tr>
                  )}
                </tbody>
              </table>
              {/* Edit Incident Modal */}
              {showEditIncidentModal && editIncident && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                  <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md relative">
                    <button
                      className="absolute top-2 right-2 text-gray-500 hover:text-red-500 text-xl"
                      onClick={handleCloseEditIncidentModal}
                    >×</button>
                    <h3 className="text-xl font-bold mb-4 text-center">ແກ້ໄຂປະເພດເຫດການ</h3>
                    <form onSubmit={e => { e.preventDefault(); handleSaveEditIncidentModal(); }} className="space-y-3">
                      <div>
                        <label className="block text-gray-700 mb-1">ID</label>
                        <input className="border px-3 py-2 rounded w-full bg-gray-100" value={editIncident.id} readOnly />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ລະຫັດປະເພດ</label>
                        <input className="border px-3 py-2 rounded w-full" value={editIncident.type}
                          onChange={e => setEditIncident({ ...editIncident, type: e.target.value })} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">ຊື່ປະເພດທີມຊ່ວຍເຫຼືອ</label>
                        <input className="border px-3 py-2 rounded w-full" value={editIncident.name}
                          onChange={e => setEditIncident({ ...editIncident, name: e.target.value })} required />
                      </div>
                      <div className="flex justify-end pt-3">
                        <button type="button"
                          className="mr-2 bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded"
                          onClick={handleCloseEditIncidentModal}>ຍົກເລີກ</button>
                        <button type="submit"
                          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">ບັນທຶກ</button>
                      </div>
                    </form>
                  </div>
                </div>
              )}
              {/* Delete Incident Modal */}
              {showDeleteIncidentModal && incidentToDelete && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                  <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm relative text-center">
                    <h3 className="text-xl font-bold mb-4 text-red-600">ຢືນຢັນການລົບ</h3>
                    <p className="mb-6">ຕ້ອງການລົບ <b>{incidentToDelete.name}</b> ຫຼືບໍ?</p>
                    <div className="flex justify-center gap-3">
                      <button className="bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded"
                        onClick={handleCancelDeleteIncident}>ຍົກເລີກ</button>
                      <button className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded"
                        onClick={handleConfirmDeleteIncident}>ລົບ</button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

        </div>
      </div>
    </>
  );
};

export default HelperApproval;
