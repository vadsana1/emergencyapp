import React, { useEffect, useState } from 'react';
import { db } from '../firebase';
import {
  collection, getDocs, updateDoc, deleteDoc, doc, query, where
} from 'firebase/firestore';


// generateUserId ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
const generateUserId = (helpers) => {
  const userIds = helpers
    .map(h => h.userId)
    .filter(Boolean)
    .map(uid => parseInt(uid.replace('u', ''), 10))
    .filter(num => !isNaN(num));
  const nextId = (userIds.length > 0 ? Math.max(...userIds) + 1 : 1).toString().padStart(3, '0');
  return `u${nextId}`;
};

const HelperTab = () => {
  const [allHelpers, setAllHelpers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [visibleRows, setVisibleRows] = useState(10);

  // Modal Add
  const [showAddModal, setShowAddModal] = useState(false);
  const [newHelper, setNewHelper] = useState({ name: '', email: '', phone: '', helperType: '', userId: '', password: '' });
  const [adding, setAdding] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  // Team Options (Dropdown)
  const [teamOptions, setTeamOptions] = useState([]);
  const [loadingTeams, setLoadingTeams] = useState(true);

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á user
  const [showCreatedInfo, setShowCreatedInfo] = useState(false);
  const [createdHelperInfo, setCreatedHelperInfo] = useState({ email: '', password: '' });

  // Edit Modal/Delete Dialog
  const [showEditHelperModal, setShowEditHelperModal] = useState(false);
  const [editHelper, setEditHelper] = useState(null);
  const [showDeleteHelperModal, setShowDeleteHelperModal] = useState(false);
  const [helperToDelete, setHelperToDelete] = useState(null);

  useEffect(() => {
    fetchAllHelpers();
    fetchTeamOptions();
  }, []);

  useEffect(() => {
    setVisibleRows(10);
  }, [allHelpers.length]);

  // Tab 1
  const fetchAllHelpers = async () => {
    setLoading(true);
    const q = query(collection(db, 'users'), where('role', '==', 'helper'));
    const querySnapshot = await getDocs(q);
    setAllHelpers(querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
    setLoading(false);
  };

  // Team dropdown
  const fetchTeamOptions = async () => {
    setLoadingTeams(true);
    const q = query(collection(db, 'helper_teams'));
    const querySnapshot = await getDocs(q);
    setTeamOptions(querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    })));
    setLoadingTeams(false);
  };

  // ===== Modal Add =====
  const handleOpenAddModal = () => {
    setNewHelper({
      name: '',
      email: '',
      phone: '',
      helperType: '',
      userId: generateUserId(allHelpers),
      password: ''
    });
    setShowAddModal(true);
    setShowPassword(false);
  };
  const handleCloseAddModal = () => {
    setShowAddModal(false);
    setNewHelper({ name: '', email: '', phone: '', helperType: '', userId: '', password: '' });
    setShowPassword(false);
  };
  const handleChangeNewHelper = (e) => {
    setNewHelper({ ...newHelper, [e.target.name]: e.target.value });
  };

  const handleAddHelper = async (e) => {
    e.preventDefault();
    setAdding(true);
    try {
      if (!newHelper.userId) {
        alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á userId ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
        setAdding(false);
        return;
      }
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å backend API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á user (‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ API ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
      const res = await fetch('https://emergencyapp-production-45d8.up.railway.app/api/admin-create-user', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: newHelper.userId,
          email: newHelper.email,
          password: newHelper.password,
          name: newHelper.name,
          phone: newHelper.phone,
          helperType: newHelper.helperType,
        }),
      });

      const data = await res.json();
      if (data.success) {
        setShowAddModal(false);
        setShowCreatedInfo(true);
        setCreatedHelperInfo({ email: newHelper.email, password: newHelper.password });
        setNewHelper({ name: '', email: '', phone: '', helperType: '', userId: '', password: '' });
        fetchAllHelpers();
      } else {
        alert(data.error || '‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô');
      }
    } catch (err) {
      alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫° API');
    }
    setAdding(false);
  };

  // ===== Edit Helper Modal =====
  const handleOpenEditHelperModal = (helper) => {
    setEditHelper({ ...helper });
    setShowEditHelperModal(true);
  };
  const handleCloseEditHelperModal = () => {
    setEditHelper(null);
    setShowEditHelperModal(false);
  };
  const handleSaveEditHelperModal = async () => {
    if (!editHelper) return;
    const handleSaveEditHelperModal = async () => {
      if (!editHelper) return;
      try {
        const res = await fetch('https://emergencyapp-production-45d8.up.railway.app/api/admin-edit-user', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            userId: editHelper.userId,
            email: editHelper.email,
            password: editHelper.password,
            name: editHelper.name,
            phone: editHelper.phone,
            helperType: editHelper.helperType,
          }),
        });
        const data = await res.json();
        if (data.success) {
          setShowEditHelperModal(false);
          setEditHelper(null);
          fetchAllHelpers();
        } else {
          alert(data.error || '‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å');
        }
      } catch (err) {
        alert('‡∫Å‡∫≤‡∫ô‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫° API ‡∫•‡∫ª‡ªâ‡∫°‡ªÄ‡∫´‡∫º‡∫ß');
      }
    };
    
    setShowEditHelperModal(false);
    setEditHelper(null);
    fetchAllHelpers();
  };

  // Delete Helper Dialog
  const handleAskDeleteHelper = (helper) => {
    setHelperToDelete(helper);
    setShowDeleteHelperModal(true);
  };
  const handleCancelDeleteHelper = () => {
    setShowDeleteHelperModal(false);
    setHelperToDelete(null);
  };
  const handleConfirmDeleteHelper = async () => {
    if (!helperToDelete) return;
    try {
      const res = await fetch('https://emergencyapp-production-45d8.up.railway.app/api/admin-delete-user', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: helperToDelete.userId,
        }),
      });
      const data = await res.json();
      if (data.success) {
        setShowDeleteHelperModal(false);
        setHelperToDelete(null);
        fetchAllHelpers();
      } else {
        alert(data.error || '‡∫•‡∫ª‡∫ö‡∫ö‡ªç‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î');
      }
    } catch (err) {
      alert('‡∫Å‡∫≤‡∫ô‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫° API ‡∫•‡∫ª‡ªâ‡∫°‡ªÄ‡∫´‡∫º‡∫ß');
    }
  };
  

  return (
    <div className="bg-white shadow-md rounded-lg p-6 relative">
      <h2 className="text-2xl font-semibold text-gray-700 mb-4">üë• ‡∫ó‡∫µ‡∫°‡∫ä‡ªà‡∫ß‡∫ç‡ªÄ‡∫´‡∫º‡∫∑‡∫≠‡∫ó‡∫±‡∫á‡∫´‡∫°‡∫ª‡∫î</h2>
      <div className="absolute top-6 right-8">
        <button
          className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-4 py-2 rounded-lg shadow transition"
          onClick={handleOpenAddModal}
        >
          + ‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫ó‡∫µ‡∫°‡∫ä‡ªà‡∫ß‡∫ç‡ªÄ‡∫´‡∫º‡∫∑‡∫≠
        </button>
      </div>
      {loading ? (
        <p className="text-gray-500">‡∫Å‡∫≥‡∫•‡∫±‡∫á‡ªÇ‡∫´‡∫•‡∫î...</p>
      ) : allHelpers.length === 0 ? (
        <p className="text-gray-500">‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ú‡∫π‡ªâ‡∫ä‡ªà‡∫ß‡∫ç</p>
      ) : (
        <div className="overflow-x-auto mt-8">
          <table className="min-w-full table-auto border-collapse border border-gray-300">
            <thead className="bg-green-100">
              <tr>
                <th className="px-4 py-2 border text-left">userId</th>
                <th className="px-4 py-2 border text-left">‡∫ä‡∫∑‡ªà</th>
                <th className="px-4 py-2 border text-left">‡∫≠‡∫µ‡ªÄ‡∫°‡∫ß</th>
                <th className="px-4 py-2 border text-left">‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ú‡ªà‡∫≤‡∫ô</th>
                <th className="px-4 py-2 border text-left">‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó</th>
                <th className="px-4 py-2 border text-left">‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡∫ó‡∫µ‡∫°</th>
                <th className="px-4 py-2 border text-left">‡∫Æ‡∫π‡∫ö‡∫û‡∫≤‡∫ö</th>
                <th className="px-4 py-2 border text-center">‡∫Å‡∫≤‡∫ô‡∫î‡∫≥‡ªÄ‡∫ô‡∫µ‡∫ô‡∫á‡∫≤‡∫ô</th>
              </tr>
            </thead>
            <tbody>
              {allHelpers.slice(0, visibleRows).map((helper) => {
                const teamObj = teamOptions.find(opt => opt.type === helper.helperType);
                const teamLabel = teamObj ? `${teamObj.name} (${teamObj.type})` : helper.helperType || '-';
                const imgUrl = helper.profileImageUrl || helper.profileImage || '/default-profile.png';
                return (
                  <tr key={helper.id} className="hover:bg-gray-50">
                    <td className="px-4 py-2 border">{helper.userId}</td>
                    <td className="px-4 py-2 border">{helper.name}</td>
                    <td className="px-4 py-2 border">{helper.email}</td>
                    <td className="px-4 py-2 border">{helper.password}</td>
                    <td className="px-4 py-2 border">{helper.phone}</td>
                    <td className="px-4 py-2 border">{teamLabel}</td>
                    <td className="relative w-20 h-20">
                      <img
                        src={imgUrl}
                        alt="helper"
                        className="w-20 h-20 rounded-full object-cover border"
                        onError={e => {
                          e.target.style.display = "none";
                          e.target.nextSibling.style.display = "flex";
                        }}
                      />
                      <div
                        className="w-20 h-20 rounded-full border bg-white text-gray-400 text-base flex items-center justify-center absolute inset-0"
                        style={{ display: 'none' }}
                      >
                        helper
                      </div>
                    </td>
                    <td className="px-4 py-2 border text-center space-x-1">
                      <button className="bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded"
                        onClick={() => handleOpenEditHelperModal(helper)}>‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç</button>
                      <button className="bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded"
                        onClick={() => handleAskDeleteHelper(helper)}>‡∫•‡∫ª‡∫ö</button>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
          {/* ‡∏õ‡∏∏‡πà‡∏° Load More */}
          {allHelpers.length > visibleRows && (
            <div className="flex justify-center my-4">
              <button
                className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded"
                onClick={() => setVisibleRows(v => v + 10)}
              >
                ‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡ªÄ‡∫ï‡∫µ‡∫°
              </button>
            </div>
          )}
        </div>
      )}

      {/* Add Modal, Edit Modal, Delete Dialog, Info Dialog */}
      {showAddModal && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                  <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md relative">
                    <button
                      className="absolute top-2 right-2 text-gray-500 hover:text-red-500 text-xl"
                      onClick={handleCloseAddModal}
                    >
                      √ó
                    </button>
                    <h3 className="text-xl font-bold mb-4 text-center">‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫ó‡∫µ‡∫°‡∫ä‡ªà‡∫ß‡∫ç‡ªÄ‡∫´‡∫º‡∫∑‡∫≠</h3>
                    <form onSubmit={handleAddHelper} className="space-y-3">
                      <div>
                        <label className="block text-gray-700 mb-1">userId (auto)</label>
                        <input className="border px-3 py-2 rounded w-full bg-gray-100"
                          name="userId" value={newHelper.userId} readOnly />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">‡∫ä‡∫∑‡ªà</label>
                        <input className="border px-3 py-2 rounded w-full"
                          name="name" value={newHelper.name}
                          onChange={handleChangeNewHelper} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">‡∫≠‡∫µ‡ªÄ‡∫°‡∫ß</label>
                        <input className="border px-3 py-2 rounded w-full"
                          name="email" type="email" value={newHelper.email}
                          onChange={handleChangeNewHelper} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ú‡ªà‡∫≤‡∫ô</label>
                        <div className="relative">
                          <input className="border px-3 py-2 rounded w-full pr-10"
                            name="password" type={showPassword ? "text" : "password"}
                            value={newHelper.password} onChange={handleChangeNewHelper} required />
                          <button type="button"
                            className="absolute right-2 top-2 text-gray-600"
                            tabIndex={-1}
                            onClick={() => setShowPassword(v => !v)}>
                            {showPassword ? "üôà" : "üëÅÔ∏è"}
                          </button>
                        </div>
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó</label>
                        <input className="border px-3 py-2 rounded w-full"
                          name="phone" value={newHelper.phone}
                          onChange={handleChangeNewHelper} required />
                      </div>
                      {/* ‡πÑ‡∏°‡πà‡∏°‡∏µ input ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ */}
                      <div>
                        <img
                          src={'/default-profile.png'}
                          alt="profile"
                          className="w-5 h-5 rounded-full border object-cover"
                        />
                        <div className="text-xs text-gray-400 pt-2">
                          * ‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫à‡∫∞‡∫à‡∫±‡∫î‡∫Å‡∫≤‡∫ô‡∫Æ‡∫π‡∫ö‡ªÄ‡∫≠‡∫á‡∫ú‡ªà‡∫≤‡∫ô‡ªú‡ªâ‡∫≤‡ªÅ‡∫≠‡∫±‡∫ö
                        </div>
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡∫ó‡∫µ‡∫°</label>
                        <select className="border px-3 py-2 rounded w-full"
                          name="helperType" value={newHelper.helperType}
                          onChange={handleChangeNewHelper} required disabled={loadingTeams}>
                          <option value="">‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡∫ó‡∫µ‡∫°</option>
                          {teamOptions.map(opt => (
                            <option key={opt.id} value={opt.type}>
                              {opt.type} ({opt.name})
                            </option>
                          ))}
                        </select>
                      </div>
                      <div className="flex justify-end pt-3">
                        <button type="button"
                          className="mr-2 bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded"
                          onClick={handleCloseAddModal} disabled={adding}>‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å</button>
                        <button type="submit"
                          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
                          disabled={adding}>{adding ? '‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å...' : '‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å'}</button>
                      </div>
                    </form>
                  </div>
                </div>
              )}

              {/* Edit Helper Modal */}
              {showEditHelperModal && editHelper && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                  <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md relative">
                    <button
                      className="absolute top-2 right-2 text-gray-500 hover:text-red-500 text-xl"
                      onClick={handleCloseEditHelperModal}
                    >
                      √ó
                    </button>
                    <h3 className="text-xl font-bold mb-4 text-center">‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ó‡∫µ‡∫°‡∫ä‡ªà‡∫ß‡∫ç‡ªÄ‡∫´‡∫º‡∫∑‡∫≠</h3>
                    <form onSubmit={e => { e.preventDefault(); handleSaveEditHelperModal(); }} className="space-y-3">
                      <div>
                        <label className="block text-gray-700 mb-1">userId</label>
                        <input className="border px-3 py-2 rounded w-full bg-gray-100"
                          value={editHelper.userId} readOnly />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">‡∫ä‡∫∑‡ªà</label>
                        <input className="border px-3 py-2 rounded w-full"
                          value={editHelper.name}
                          onChange={e => setEditHelper({ ...editHelper, name: e.target.value })} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">‡∫≠‡∫µ‡ªÄ‡∫°‡∫ß</label>
                        <input className="border px-3 py-2 rounded w-full" type="email"
                          value={editHelper.email}
                          onChange={e => setEditHelper({ ...editHelper, email: e.target.value })} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ú‡ªà‡∫≤‡∫ô</label>
                        <input className="border px-3 py-2 rounded w-full"
                          value={editHelper.password} type="text"
                          onChange={e => setEditHelper({ ...editHelper, password: e.target.value })} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó</label>
                        <input className="border px-3 py-2 rounded w-full"
                          value={editHelper.phone}
                          onChange={e => setEditHelper({ ...editHelper, phone: e.target.value })} required />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">‡∫Æ‡∫π‡∫ö‡∫û‡∫≤‡∫ö</label>
                        <img
                          src={editHelper?.profileImageUrl || editHelper?.profileImage || '/default-profile.png'}
                          alt="profile"
                          className="w-16 h-16 rounded-full border object-cover"
                        />
                        <div className="text-xs text-gray-400 pt-2">
                          * ‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫à‡∫∞‡∫à‡∫±‡∫î‡∫Å‡∫≤‡∫ô‡∫Æ‡∫π‡∫ö‡ªÄ‡∫≠‡∫á‡∫ú‡ªà‡∫≤‡∫ô‡ªú‡ªâ‡∫≤‡ªÅ‡∫≠‡∫±‡∫ö
                        </div>
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-1">‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡∫ó‡∫µ‡∫°</label>
                        <select className="border px-3 py-2 rounded w-full"
                          value={editHelper.helperType}
                          onChange={e => setEditHelper({ ...editHelper, helperType: e.target.value })} required>
                          <option value="">‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡∫ó‡∫µ‡∫°</option>
                          {teamOptions.map(opt => (
                            <option key={opt.id} value={opt.type}>
                              {opt.name} ({opt.type})
                            </option>
                          ))}
                        </select>
                      </div>
                      <div className="flex justify-end pt-3">
                        <button type="button"
                          className="mr-2 bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded"
                          onClick={handleCloseEditHelperModal}>‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å</button>
                        <button type="submit"
                          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å</button>
                      </div>
                    </form>
                  </div>
                </div>
              )}

              {/* Delete Helper Modal */}
              {showDeleteHelperModal && helperToDelete && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                  <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm relative text-center">
                    <h3 className="text-xl font-bold mb-4 text-red-600">‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡∫•‡∫ª‡∫ö</h3>
                    <p className="mb-6">‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫•‡∫ª‡∫ö <b>{helperToDelete.name}</b> ‡∫´‡∫º‡∫∑‡∫ö‡ªç?</p>
                    <div className="flex justify-center gap-3">
                      <button className="bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded"
                        onClick={handleCancelDeleteHelper}>‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å</button>
                      <button className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded"
                        onClick={handleConfirmDeleteHelper}>‡∫•‡∫ª‡∫ö</button>
                    </div>
                  </div>
                </div>
              )}

              {/* Show Created Info */}
              {showCreatedInfo && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                  <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-sm relative text-center">
                    <h4 className="font-bold text-lg mb-4 text-green-600">‡∫™‡ªâ‡∫≤‡∫á‡∫ö‡∫±‡∫ô‡∫ä‡∫µ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î!</h4>
                    <div className="mb-2"><b>Email:</b> {createdHelperInfo.email}</div>
                    <div className="mb-4"><b>Password:</b> {createdHelperInfo.password}</div>
                    <p className="text-sm text-gray-500 mb-4">‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫Ñ‡∫±‡∫î‡∫•‡∫≠‡∫Å/‡ªÅ‡∫à‡ªâ‡∫á‡ªÉ‡∫´‡ªâ‡∫ó‡∫µ‡∫°‡∫á‡∫≤‡∫ô‡∫ô‡∫≥‡ªÑ‡∫õ‡ªÉ‡∫ä‡ªâ login </p>
                    <button className="bg-blue-600 text-white px-4 py-2 rounded"
                      onClick={() => setShowCreatedInfo(false)}>‡∫õ‡∫¥‡∫î</button>
                  </div>
                </div>
              )}
    </div>
  );
};

export default HelperTab;
